openapi: 3.0.3
info:
  title: Services
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://services.test'
paths:
  /api/login:
    post:
      summary: 'Login the user to their account'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Authentication APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The user''s email address'
                  example: accusantium
                password:
                  type: string
                  description: 'The user''s password'
                  example: ad
              required:
                - email
                - password
      security: []
  /api/register:
    post:
      summary: 'Register New User.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Authentication APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                f_name:
                  type: string
                  description: 'The user''s first name'
                  example: ut
                l_name:
                  type: string
                  description: 'The user''s last name'
                  example: qui
                email:
                  type: string
                  description: 'The user''s email address'
                  example: maiores
                phone_number:
                  type: string
                  description: 'The user''s phone number'
                  example: voluptatem
                password:
                  type: string
                  description: 'The user''s password'
                  example: dolorum
              required:
                - f_name
                - l_name
                - email
                - phone_number
                - password
      security: []
  /api/google/auth:
    post:
      summary: 'Social Login'
      description: 'Login through google'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Authentication APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user'
                  example: aut
                email:
                  type: string
                  description: 'The email of the user'
                  example: autem
                phone_number:
                  type: string
                  description: 'The user''s phone number'
                  example: dolor
                token:
                  type: string
                  description: 'A google provided token'
                  example: laborum
                email_verified:
                  type: boolean
                  description: 'Whether the user email is verified'
                  example: false
              required:
                - name
                - email
      security: []
  /api/user:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/services:
    get:
      summary: 'Get all services.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      security: []
    post:
      summary: 'Add a new service.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the new service'
                  example: placeat
                price:
                  type: string
                  description: 'The price of the new service'
                  example: dolores
                location_lat:
                  type: string
                  description: 'The latitude location of the new service'
                  example: in
                location_long:
                  type: string
                  description: 'The longitude location of the new service'
                  example: vero
                description:
                  type: text
                  description: 'The description of the new service'
                  example: ut
              required:
                - title
                - price
                - location_lat
                - location_long
  '/api/services/{id}':
    put:
      summary: 'Update a service.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the service'
                  example: recusandae
                description:
                  type: string
                  description: 'The description of the service'
                  example: sit
                price:
                  type: string
                  description: 'The price of the service'
                  example: ut
                location_lat:
                  type: string
                  description: 'The latitude location of the new service'
                  example: ut
                location_long:
                  type: string
                  description: 'The longitude location of the new service'
                  example: temporibus
              required:
                - title
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The id of the service'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: non
tags:
  -
    name: 'Authentication APIs'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Services APIs'
    description: ''
